#+AUTHOR: Corey Smith
#+TITLE: Emacs configuration file
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes


* Overview

* git initialization
There is no reason to track the init.el that is generated; by running
the following command git will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of init.el start
tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC

* Where to get the packages from
#+BEGIN_SRC emacs-lisp
(package-initialize)
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/")
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))
(setq package-enable-at-startup nil)
#+END_SRC

* use package
#+BEGIN_SRC emacs-lisp
; This is only needed once, near the top of the file
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (add-to-list 'load-path "<path where use-package is installed>")
  (require 'use-package))
#+END_SRC

* remove compilled files
#+BEGIN_SRC emacs-lisp
(defun remove-elc-on-save ()
  "If you're saving an elisp file, likely the .elc is no longer valid."
  (add-hook 'after-save-hook
            (lambda ()
              (if (file-exists-p (concat buffer-file-name "c"))
                  (delete-file (concat buffer-file-name "c"))))
            nil
            t))

(add-hook 'emacs-lisp-mode-hook 'remove-elc-on-save)
#+END_SRC

* doom theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :init
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  )
;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
(load-theme 'doom-peacock t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme
(doom-themes-neotree-config)  ; all-the-icons fonts must be installed!

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
#+END_SRC

* cuda package
#+BEGIN_SRC emacs-lisp
(use-package cuda-mode
  :ensure t
)
#+END_SRC

* auto complete
( use-package auto-complete
  :ensure t)

* fly check
#+BEGIN_SRC emacs-lisp
;; fly-check
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

* ido mode
#+BEGIN_SRC emacs-lisp
; Use ido
(require 'ido)
(ido-mode 1)

(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-use-filename-at-point 'guess)
(setq ido-file-extensions-order '(".org" ".txt" ".py"))
#+END_SRC

* hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(setq linum-format "%d ")
#+END_SRC

* key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-c") 'comment-region)
(global-set-key (kbd "M-u") 'uncomment-region)
#+END_SRC

* interactive python mode
#+BEGIN_SRC emacs-lisp
(use-package ein
  :ensure t
  :init
  (setq ein:use-auto-complete t;auto-complete commands
        ein:use-smartrep t;repeating without bindings 
        ))
#+END_SRC
Setup
#+BEGIN_SRC emacs-lisp
(require 'ein)
(require 'ein-loaddefs)
(require 'ein-notebook)
(require 'ein-subpackages)
#+END_SRC

* Babel Org Mode
This is where extra languages are loaded in
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ipython . t)
   ;; other languages..
   ))
(setq org-confirm-babel-evaluate nil)
;(add-hook ‘org-babel-after-execute-hook ‘org-display-inline-images ‘append)
#+END_SRC

* org ipython
#+BEGIN_SRC emacs-lisp
(use-package ob-ipython
  :ensure t
)
#+END_SRC
* smartrep
#+BEGIN_SRC emacs-lisp
(use-package smartrep
  :ensure t)
#+END_SRC

Changing Window size tends to execute the same command continuously. It is boring work. So eval this example and type =C-x { { {=
#+BEGIN_SRC emacs-lisp
(smartrep-define-key
    global-map "C-x"
  '(("{" . shrink-window-horizontally)
    ("}" . enlarge-window-horizontally)))

#+END_SRC


* tangle init automatically
#+BEGIN_SRC emacs-lisp :tangle yes 
 (use-package async 
  :ensure t
  :config
   (defun my/init-hook ()
     "If the current buffer is 'settings.org' the code-blocks are tangled."
     (when (equal (buffer-file-name) (expand-file-name "~/config/settings.org"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file (expand-file-name "~/config/settings.org") (expand-file-name "~/config/settings.el")))
       (lambda (result)
         (message "Tangled file compiled."))))))

  (add-hook 'after-save-hook 'my/init-hook nil) 
 ; (add-hook 'after-save-hook 'byte-compile-file (expand-file-name "~/config/settings.el"))
#+END_SRC

* user info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Corey D Smith")
 (setq user-mail-address "coreys@uchicago.edu") 
#+END_SRC
